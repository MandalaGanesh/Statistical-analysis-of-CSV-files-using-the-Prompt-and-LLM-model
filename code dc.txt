pip install pandas matplotlib seaborn

import pandas as pd

def read_csv(file_path):
    try:
        data = pd.read_csv('/content/employee_data.csv')
        print(f"Successfully read the CSV file: {'/content/employee_data.csv'}")
        return data
    except Exception as e:
        print(f"Error reading the CSV file: {e}")
        return None


import pandas as pd
import numpy as np

def calculate_statistics(data):
    if data is None:
        return None

    # Select only numeric columns for correlation calculation
    numeric_data = data.select_dtypes(include=np.number)

    stats = {
        'mean': data.mean(numeric_only=True).to_dict(),
        'median': data.median(numeric_only=True).to_dict(),
        'mode': data.mode().iloc[0].to_dict(),
        'std_dev': data.std(numeric_only=True).to_dict(),
        # Calculate correlation on numeric data only
        'correlation': numeric_data.corr().to_dict()
    }

    print("Calculated Statistics:")
    for stat, values in stats.items():
        print(f"{stat.capitalize()}: {values}")

    return stats

import matplotlib.pyplot as plt
import seaborn as sns

def generate_histogram(data, column):
    try:
        plt.figure(figsize=(10, 6))
        sns.histplot(data[column], kde=True)
        plt.title(f'Histogram of {column}')
        plt.xlabel(column)
        plt.ylabel('Frequency')
        plt.show()
    except Exception as e:
        print(f"Error generating histogram: {e}")

def generate_scatter_plot(data, column1, column2):
    try:
        plt.figure(figsize=(10, 6))
        sns.scatterplot(x=data[column1], y=data[column2])
        plt.title(f'Scatter Plot of {column1} vs {column2}')
        plt.xlabel(column1)
        plt.ylabel(column2)
        plt.show()
    except Exception as e:
        print(f"Error generating scatter plot: {e}")

def generate_line_plot(data, column):
    try:
        plt.figure(figsize=(10, 6))
        sns.lineplot(data=data[column])
        plt.title(f'Line Plot of {column}')
        plt.xlabel('Index')
        plt.ylabel(column)
        plt.show()
    except Exception as e:
        print(f"Error generating line plot: {e}")



from transformers import pipeline

def query_model(question, data_description):
    try:
        qa_pipeline = pipeline("question-answering")
        context = f"Data Description:\n{data_description}"
        result = qa_pipeline(question=question, context=context)
        answer = result['answer']
        return answer
    except Exception as e:
        print(f"Error querying the model: {e}")
        return "Sorry, I couldn't process the question."



def main(file_path, questions):
    # phase 1: Read CSV file
    data = read_csv('/content/employee_data.csv')
    if data is None:
        return

    # phase 2: Calculate statistics
    stats = calculate_statistics(data)

    # phase 3: Generate plots
    columns = data.columns
    if len(columns) >= 2:
        generate_histogram(data, columns[0])
        generate_scatter_plot(data, columns[0], columns[1])
        generate_line_plot(data, columns[0])
    else:
        print("Not enough columns for generating all types of plots.")

    # phase 4: Answer questions
    data_description = data.describe().to_string()
    for question in questions:
        answer = query_model(question, data_description)
        print(f"Question: {question}\nAnswer: {answer}\n")

# as an instance usage
file_path = '/content/employee_data.csv'
questions = [
    "What is the mean of the first column?",
    "How does the first column correlate with the second column?"
]
main(file_path, questions)


